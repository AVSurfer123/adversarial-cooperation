# --- DQN specific parameters ---

# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0
epsilon_finish: 0.05
epsilon_anneal_time: 50000

# Not sure whether episode vs parallel matters, but parallel should be faster
# runner: "episode"
runner: "parallel"
batch_size_run: 8

buffer_size: 5000

# update the target network every {} episodes
target_update_interval: 200

mac: "adv_mac" # Adversarial controller

# use the Q_Learner to train
agent_output_type: "q"
learner: "q_learner"
double_q: True
adversarial: True # Tries to minimize Q value instead of maximize
mixer: # Mixer becomes None

name: "adv_dqn"

# CUSTOM:
save_model: True # Save the models to disk
save_model_interval: 500000 # Save models after this many timesteps

# Path to trained QMIX policy for N-1 agents
# trained_agent_policy: "results/models/qmix_2s3z/2000079"
trained_agent_policy: "results/models/qmix_3s_vs_5z/2000183"
